/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlogSection = {
  _type: "blogSection";
  heading?: string;
  variant?: "default" | "grid";
  subheading?: string;
  postsToShow?: number;
  showFeaturedPostLarge?: "true" | "false";
  featuredPostsOnly?: "true" | "false";
  viewAllButton?: "true" | "false";
  viewAllUrl?: string;
  viewAllButtonText?: string;
};

export type PortableText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    blank?: "true" | "false";
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  _key: string;
} & CodeBlock | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  caption?: string;
  _type: "image";
  _key: string;
}>;

export type CodeBlock = {
  _type: "codeBlock";
  title?: string;
  code?: Code;
  highlightLines?: string;
  showLineNumbers?: "true" | "false";
  caption?: string;
};

export type TranslationMetadata = {
  _id: string;
  _type: "translation.metadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<{
    _key: string;
  } & InternationalizedArrayReferenceValue>;
  schemaTypes?: Array<string>;
};

export type InternationalizedArrayReferenceValue = {
  _type: "internationalizedArrayReferenceValue";
  value?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "blogPost";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "blogPage";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "header";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "footer";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "compareFeature";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "featureSection";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "heroSection";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "casesSection";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "testimonialsSection";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "pricingSection";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "compareFeaturesSection";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "statsSection";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "ctaSection";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "faqSection";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "contactSection";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "newsletterSection";
  };
};

export type NewsletterSection = {
  _type: "newsletterSection";
  variant?: "default" | "highlight" | "minimal" | "full";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  inputPlaceholder?: string;
  buttonText?: string;
  buttonIcon?: "none" | "arrowRight" | "plus" | "mail";
  successMessage?: string;
  privacyText?: string;
};

export type ContactSection = {
  _type: "contactSection";
  badgeText?: string;
  heading?: string;
  description?: string;
  features?: Array<{
    title?: string;
    description?: string;
    _type: "feature";
    _key: string;
  }>;
  formTitle?: string;
  formFields?: {
    showDate?: "true" | "false";
    showFirstName?: "true" | "false";
    showLastName?: "true" | "false";
    showFileUpload?: "true" | "false";
    fileUploadLabel?: string;
  };
  buttonText?: string;
  buttonIcon?: "arrowRight" | "phone" | "none";
};

export type FaqSection = {
  _type: "faqSection";
  variant?: "sideBySide" | "centered";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  buttonText?: string;
  buttonUrl?: string;
  buttonIcon?: "none" | "phone" | "arrowRight" | "plus" | "check";
  faqItems?: Array<{
    question?: string;
    answer?: string;
    _type: "faqItem";
    _key: string;
  }>;
};

export type CtaSection = {
  _type: "ctaSection";
  variant?: "default" | "highlight" | "minimal" | "full";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  buttons?: Array<{
    label?: string;
    url?: string;
    variant?: "default" | "secondary" | "outline" | "ghost" | "link";
    icon?: "none" | "arrowRight" | "phone" | "plus";
    _type: "button";
    _key: string;
  }>;
};

export type StatsSection = {
  _type: "statsSection";
  variant?: "grid" | "withContent";
  badgeText?: string;
  contentHeading?: string;
  contentText?: string;
  heading?: string;
  subheading?: string;
  stats?: Array<{
    value?: string;
    label?: string;
    trendDirection?: "up" | "down" | "none";
    trendValue?: string;
    color?: "primary" | "success" | "warning" | "destructive" | "muted";
    _type: "stat";
    _key: string;
  }>;
};

export type CompareFeaturesSection = {
  _type: "compareFeaturesSection";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  features?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "compareFeature";
  }>;
  plans?: Array<{
    title?: string;
    description?: string;
    price?: string;
    billingPeriod?: string;
    highlighted?: "true" | "false";
    featureValues?: Array<{
      featureRef?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "compareFeature";
      };
      value?: "true" | "false" | "custom";
      customText?: string;
      _type: "featureValue";
      _key: string;
    }>;
    buttonText?: string;
    buttonUrl?: string;
    buttonIcon?: "arrowRight" | "phone" | "plus";
    buttonVariant?: "default" | "secondary" | "outline" | "ghost" | "link";
    _type: "plan";
    _key: string;
  }>;
  footnote?: string;
};

export type PricingSection = {
  _type: "pricingSection";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  plans?: Array<{
    title?: string;
    description?: string;
    highlighted?: "true" | "false";
    price?: string;
    billingPeriod?: string;
    features?: Array<{
      title?: string;
      description?: string;
      _type: "feature";
      _key: string;
    }>;
    buttonText?: string;
    buttonUrl?: string;
    buttonIcon?: "arrowRight" | "phone" | "plus";
    buttonVariant?: "default" | "outline" | "secondary";
    _type: "plan";
    _key: string;
  }>;
};

export type TestimonialsSection = {
  _type: "testimonialsSection";
  variant?: "carousel" | "grid" | "masonry-grid";
  heading?: string;
  subheading?: string;
  testimonials?: Array<{
    title?: string;
    content?: string;
    author?: string;
    role?: string;
    avatar?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    _type: "testimonial";
    _key: string;
  }>;
};

export type CasesSection = {
  _type: "casesSection";
  variant?: "logoCarousel" | "compactSlider";
  heading?: string;
  subheading?: string;
  cases?: Array<{
    name?: string;
    logo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    url?: string;
    _type: "caseItem";
    _key: string;
  }>;
};

export type HeroSection = {
  _type: "heroSection";
  variant?: "buttonBanner" | "badgeBanner" | "gridGallery";
  bannerButton?: {
    label?: string;
    url?: string;
  };
  badgeText?: string;
  heading?: string;
  subheading?: string;
  buttons?: Array<{
    label?: string;
    url?: string;
    variant?: "default" | "secondary" | "outline" | "ghost" | "link";
    icon?: "phone" | "arrowRight" | "plus" | "check" | "heart" | "star" | "search" | "settings" | "mail" | "calendar";
    _type: "button";
    _key: string;
  }>;
  media?: {
    type?: "image" | "video" | "placeholder";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    video?: {
      url?: string;
      autoplay?: "true" | "false";
      loop?: "true" | "false";
      muted?: "true" | "false";
    };
    additionalImages?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
  };
};

export type FeatureSection = {
  _type: "featureSection";
  variant?: "default" | "withImage" | "leftImage" | "rightImage" | "imageCards" | "masonryGrid" | "bigMasonryGrid" | "carouselFeature" | "slidingComparison";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  comparisonImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  features?: Array<{
    title?: string;
    description?: string;
    icon?: "user" | "settings" | "lock" | "star" | "heart" | "barChart" | "dollar" | "calendar" | "clock" | "mail";
    highlighted?: "true" | "false";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    _type: "feature";
    _key: string;
  }>;
};

export type Footer = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  variant?: "simple" | "minimal" | "tiny";
  description?: string;
  address?: Array<string>;
  legalLinks?: Array<{
    title?: string;
    url?: string;
    _type: "link";
    _key: string;
  }>;
  navigationItems?: Array<{
    title?: string;
    href?: string;
    description?: string;
    items?: Array<{
      title?: string;
      href?: string;
      _type: "subItem";
      _key: string;
    }>;
    _type: "navigationItem";
    _key: string;
  }>;
};

export type Header = {
  _id: string;
  _type: "header";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  variant?: "default" | "centered" | "minimal" | "transparent";
  navigationItems?: Array<{
    title?: string;
    href?: string;
    description?: string;
    items?: Array<{
      title?: string;
      href?: string;
      _type: "subItem";
      _key: string;
    }>;
    _type: "navigationItem";
    _key: string;
  }>;
  ctaButtons?: Array<{
    label?: string;
    url?: string;
    variant?: "default" | "outline" | "secondary" | "ghost" | "link";
    _type: "button";
    _key: string;
  }>;
  dropdownCTALabel?: string;
  dropdownCTAUrl?: string;
};

export type BlogPage = {
  _id: string;
  _type: "blogPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  description?: string;
  layout?: "grid" | "featured" | "compact";
  postsPerPage?: number;
  featuredPostsCount?: number;
  showOnlyFeaturedPosts?: "true" | "false";
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  name?: string;
  slug?: Slug;
  avatar?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  role?: string;
  bio?: string;
  fullBio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  socialLinks?: Array<{
    platform?: "twitter" | "linkedin" | "github" | "instagram" | "website" | "youtube";
    url?: string;
    username?: string;
    _type: "socialLink";
    _key: string;
  }>;
  email?: string;
};

export type BlogPost = {
  _id: string;
  _type: "blogPost";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  slug?: Slug;
  publishedAt?: string;
  excerpt?: string;
  authors?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  body?: PortableText;
  featured?: "true" | "false";
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  slug?: Slug;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  pageBuilder?: Array<{
    _key: string;
  } & HeroSection | {
    _key: string;
  } & CasesSection | {
    _key: string;
  } & TestimonialsSection | {
    _key: string;
  } & PricingSection | {
    _key: string;
  } & CompareFeaturesSection | {
    _key: string;
  } & StatsSection | {
    _key: string;
  } & CtaSection | {
    _key: string;
  } & FaqSection | {
    _key: string;
  } & FeatureSection | {
    _key: string;
  } & BlogSection | {
    _key: string;
  } & ContactSection | {
    _key: string;
  } & NewsletterSection>;
};

export type CompareFeature = {
  _id: string;
  _type: "compareFeature";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  description?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type InternationalizedArrayReference = Array<{
  _key: string;
} & InternationalizedArrayReferenceValue>;

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | BlogSection | PortableText | CodeBlock | TranslationMetadata | InternationalizedArrayReferenceValue | NewsletterSection | ContactSection | FaqSection | CtaSection | StatsSection | CompareFeaturesSection | PricingSection | TestimonialsSection | CasesSection | HeroSection | FeatureSection | Footer | Header | BlogPage | Category | Author | BlogPost | Page | CompareFeature | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug | InternationalizedArrayReference | Code;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/components/sections/blog/shared.tsx
// Variable: BLOG_POSTS_QUERY
// Query: *[  _type == "blogPost"  && language == $language  && ($featuredOnly == false || featured == "true")] | order(publishedAt desc)[$start...$end]{  _id,  title,  slug,  publishedAt,  excerpt,  mainImage,  featured,  "author": authors[0]->{    _id,    name,    avatar  },  "categories": categories[]->{    _id,    title,    slug  }}
export type BLOG_POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  excerpt: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  featured: "false" | "true" | null;
  author: {
    _id: string;
    name: string | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
}>;

// Source: ./src/sanity/client.ts
// Variable: TRANSLATION_METADATA_QUERY
// Query: *[  _type == "translation.metadata"   && (    ($documentId != null && translations[].value._ref == $documentId) ||    ($slug != null && references(*[      _type in ["page", "blogPost", "author", "category"]       && slug.current == $slug      && language == $currentLanguage    ][0]._id))  )][0]{  translations[]{    _key,    value->{      _id,      _type,      slug,      language,      title    }  }}
export type TRANSLATION_METADATA_QUERYResult = {
  translations: Array<{
    _key: string;
    value: {
      _id: string;
      _type: "author";
      slug: Slug | null;
      language: string | null;
      title: null;
    } | {
      _id: string;
      _type: "blogPage";
      slug: null;
      language: string | null;
      title: string | null;
    } | {
      _id: string;
      _type: "blogPost";
      slug: Slug | null;
      language: string | null;
      title: string | null;
    } | null | {
      _id: string;
      _type: "category";
      slug: Slug | null;
      language: string | null;
      title: string | null;
    } | {
      _id: string;
      _type: "compareFeature";
      slug: null;
      language: string | null;
      title: string | null;
    } | {
      _id: string;
      _type: "footer";
      slug: null;
      language: string | null;
      title: string | null;
    } | {
      _id: string;
      _type: "header";
      slug: null;
      language: string | null;
      title: string | null;
    } | {
      _id: string;
      _type: "page";
      slug: Slug | null;
      language: string | null;
      title: string | null;
    };
  }> | null;
} | null;

// Source: ./src/sanity/queries.ts
// Variable: LAYOUT_HEADER_QUERY
// Query: *[  _type == "header"  && language == $language][0]{  _id,  title,  logo,  variant,  navigationItems[]{    title,    href,    description,    items[]{      title,      href,      _key    },    _key  },  ctaButtons[]{    label,    url,    variant,    _key  },  dropdownCTALabel,  dropdownCTAUrl,  "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{    _id,    title,    language  }}
export type LAYOUT_HEADER_QUERYResult = {
  _id: string;
  title: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  variant: "centered" | "default" | "minimal" | "transparent" | null;
  navigationItems: Array<{
    title: string | null;
    href: string | null;
    description: string | null;
    items: Array<{
      title: string | null;
      href: string | null;
      _key: string;
    }> | null;
    _key: string;
  }> | null;
  ctaButtons: Array<{
    label: string | null;
    url: string | null;
    variant: "default" | "ghost" | "link" | "outline" | "secondary" | null;
    _key: string;
  }> | null;
  dropdownCTALabel: string | null;
  dropdownCTAUrl: string | null;
  _translations: Array<{
    _id: string;
    title: null;
    language: string | null;
  } | {
    _id: string;
    title: string | null;
    language: string | null;
  } | null>;
} | null;
// Variable: LAYOUT_FOOTER_QUERY
// Query: *[  _type == "footer"  && language == $language][0]{  _id,  title,  logo,  variant,  description,  address,  legalLinks[]{    title,    url,    _key  },  navigationItems[]{    title,    href,    description,    items[]{      title,      href,      _key    },    _key  },  "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{    _id,    title,    language  }}
export type LAYOUT_FOOTER_QUERYResult = {
  _id: string;
  title: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  variant: "minimal" | "simple" | "tiny" | null;
  description: string | null;
  address: Array<string> | null;
  legalLinks: Array<{
    title: string | null;
    url: string | null;
    _key: string;
  }> | null;
  navigationItems: Array<{
    title: string | null;
    href: string | null;
    description: string | null;
    items: Array<{
      title: string | null;
      href: string | null;
      _key: string;
    }> | null;
    _key: string;
  }> | null;
  _translations: Array<{
    _id: string;
    title: null;
    language: string | null;
  } | {
    _id: string;
    title: string | null;
    language: string | null;
  } | null>;
} | null;
// Variable: HOME_PAGE_QUERY
// Query: *[  _type == "page"  && slug.current == "/"  && language == $language][0]{  _id,  _type,  title,  description,  ogImage,  pageBuilder[]{    _key,    _type,    ...,    _type == "compareFeaturesSection" => {      ...,      "features": features[]{        "_ref": _ref,        "_key": _key,        "_type": _type      },      "plans": plans[]{        ...,        "featureValues": featureValues[]{          ...,          "featureRef": {            "_ref": featureRef._ref,            "_type": featureRef._type          }        }      }    }  },  "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{    _id,    title,    slug,    language  }}
export type HOME_PAGE_QUERYResult = {
  _id: string;
  _type: "page";
  title: string | null;
  description: string | null;
  ogImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  pageBuilder: Array<{
    _key: string;
    _type: "blogSection";
    heading?: string;
    variant?: "default" | "grid";
    subheading?: string;
    postsToShow?: number;
    showFeaturedPostLarge?: "false" | "true";
    featuredPostsOnly?: "false" | "true";
    viewAllButton?: "false" | "true";
    viewAllUrl?: string;
    viewAllButtonText?: string;
  } | {
    _key: string;
    _type: "casesSection";
    variant?: "compactSlider" | "logoCarousel";
    heading?: string;
    subheading?: string;
    cases?: Array<{
      name?: string;
      logo?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      url?: string;
      _type: "caseItem";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "compareFeaturesSection";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    features: Array<{
      _ref: string;
      _key: string;
      _type: "reference";
    }> | null;
    plans: Array<{
      title?: string;
      description?: string;
      price?: string;
      billingPeriod?: string;
      highlighted?: "false" | "true";
      featureValues: Array<{
        featureRef: {
          _ref: string | null;
          _type: "reference" | null;
        };
        value?: "custom" | "false" | "true";
        customText?: string;
        _type: "featureValue";
        _key: string;
      }> | null;
      buttonText?: string;
      buttonUrl?: string;
      buttonIcon?: "arrowRight" | "phone" | "plus";
      buttonVariant?: "default" | "ghost" | "link" | "outline" | "secondary";
      _type: "plan";
      _key: string;
    }> | null;
    footnote?: string;
  } | {
    _key: string;
    _type: "contactSection";
    badgeText?: string;
    heading?: string;
    description?: string;
    features?: Array<{
      title?: string;
      description?: string;
      _type: "feature";
      _key: string;
    }>;
    formTitle?: string;
    formFields?: {
      showDate?: "false" | "true";
      showFirstName?: "false" | "true";
      showLastName?: "false" | "true";
      showFileUpload?: "false" | "true";
      fileUploadLabel?: string;
    };
    buttonText?: string;
    buttonIcon?: "arrowRight" | "none" | "phone";
  } | {
    _key: string;
    _type: "ctaSection";
    variant?: "default" | "full" | "highlight" | "minimal";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    buttons?: Array<{
      label?: string;
      url?: string;
      variant?: "default" | "ghost" | "link" | "outline" | "secondary";
      icon?: "arrowRight" | "none" | "phone" | "plus";
      _type: "button";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "faqSection";
    variant?: "centered" | "sideBySide";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    buttonText?: string;
    buttonUrl?: string;
    buttonIcon?: "arrowRight" | "check" | "none" | "phone" | "plus";
    faqItems?: Array<{
      question?: string;
      answer?: string;
      _type: "faqItem";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "featureSection";
    variant?: "bigMasonryGrid" | "carouselFeature" | "default" | "imageCards" | "leftImage" | "masonryGrid" | "rightImage" | "slidingComparison" | "withImage";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    comparisonImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    features?: Array<{
      title?: string;
      description?: string;
      icon?: "barChart" | "calendar" | "clock" | "dollar" | "heart" | "lock" | "mail" | "settings" | "star" | "user";
      highlighted?: "false" | "true";
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      _type: "feature";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "heroSection";
    variant?: "badgeBanner" | "buttonBanner" | "gridGallery";
    bannerButton?: {
      label?: string;
      url?: string;
    };
    badgeText?: string;
    heading?: string;
    subheading?: string;
    buttons?: Array<{
      label?: string;
      url?: string;
      variant?: "default" | "ghost" | "link" | "outline" | "secondary";
      icon?: "arrowRight" | "calendar" | "check" | "heart" | "mail" | "phone" | "plus" | "search" | "settings" | "star";
      _type: "button";
      _key: string;
    }>;
    media?: {
      type?: "image" | "placeholder" | "video";
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      video?: {
        url?: string;
        autoplay?: "false" | "true";
        loop?: "false" | "true";
        muted?: "false" | "true";
      };
      additionalImages?: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }>;
    };
  } | {
    _key: string;
    _type: "newsletterSection";
    variant?: "default" | "full" | "highlight" | "minimal";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    inputPlaceholder?: string;
    buttonText?: string;
    buttonIcon?: "arrowRight" | "mail" | "none" | "plus";
    successMessage?: string;
    privacyText?: string;
  } | {
    _key: string;
    _type: "pricingSection";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    plans?: Array<{
      title?: string;
      description?: string;
      highlighted?: "false" | "true";
      price?: string;
      billingPeriod?: string;
      features?: Array<{
        title?: string;
        description?: string;
        _type: "feature";
        _key: string;
      }>;
      buttonText?: string;
      buttonUrl?: string;
      buttonIcon?: "arrowRight" | "phone" | "plus";
      buttonVariant?: "default" | "outline" | "secondary";
      _type: "plan";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "statsSection";
    variant?: "grid" | "withContent";
    badgeText?: string;
    contentHeading?: string;
    contentText?: string;
    heading?: string;
    subheading?: string;
    stats?: Array<{
      value?: string;
      label?: string;
      trendDirection?: "down" | "none" | "up";
      trendValue?: string;
      color?: "destructive" | "muted" | "primary" | "success" | "warning";
      _type: "stat";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "testimonialsSection";
    variant?: "carousel" | "grid" | "masonry-grid";
    heading?: string;
    subheading?: string;
    testimonials?: Array<{
      title?: string;
      content?: string;
      author?: string;
      role?: string;
      avatar?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      _type: "testimonial";
      _key: string;
    }>;
  }> | null;
  _translations: Array<{
    _id: string;
    title: string | null;
    slug: null;
    language: string | null;
  } | {
    _id: string;
    title: null;
    slug: Slug | null;
    language: string | null;
  } | {
    _id: string;
    title: string | null;
    slug: Slug | null;
    language: string | null;
  } | null>;
} | null;
// Variable: PAGE_QUERY
// Query: *[  _type == "page"  && slug.current == $slug  && language == $language][0]{  _id,  _type,  title,  description,  ogImage,  pageBuilder[]{    _key,    _type,    ...,    _type == "compareFeaturesSection" => {      ...,      "features": features[]{        "_ref": _ref,        "_key": _key,        "_type": _type      },      "plans": plans[]{        ...,        "featureValues": featureValues[]{          ...,          "featureRef": {            "_ref": featureRef._ref,            "_type": featureRef._type          }        }      }    }  },  "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{    _id,    title,    slug,    language  }}
export type PAGE_QUERYResult = {
  _id: string;
  _type: "page";
  title: string | null;
  description: string | null;
  ogImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  pageBuilder: Array<{
    _key: string;
    _type: "blogSection";
    heading?: string;
    variant?: "default" | "grid";
    subheading?: string;
    postsToShow?: number;
    showFeaturedPostLarge?: "false" | "true";
    featuredPostsOnly?: "false" | "true";
    viewAllButton?: "false" | "true";
    viewAllUrl?: string;
    viewAllButtonText?: string;
  } | {
    _key: string;
    _type: "casesSection";
    variant?: "compactSlider" | "logoCarousel";
    heading?: string;
    subheading?: string;
    cases?: Array<{
      name?: string;
      logo?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      url?: string;
      _type: "caseItem";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "compareFeaturesSection";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    features: Array<{
      _ref: string;
      _key: string;
      _type: "reference";
    }> | null;
    plans: Array<{
      title?: string;
      description?: string;
      price?: string;
      billingPeriod?: string;
      highlighted?: "false" | "true";
      featureValues: Array<{
        featureRef: {
          _ref: string | null;
          _type: "reference" | null;
        };
        value?: "custom" | "false" | "true";
        customText?: string;
        _type: "featureValue";
        _key: string;
      }> | null;
      buttonText?: string;
      buttonUrl?: string;
      buttonIcon?: "arrowRight" | "phone" | "plus";
      buttonVariant?: "default" | "ghost" | "link" | "outline" | "secondary";
      _type: "plan";
      _key: string;
    }> | null;
    footnote?: string;
  } | {
    _key: string;
    _type: "contactSection";
    badgeText?: string;
    heading?: string;
    description?: string;
    features?: Array<{
      title?: string;
      description?: string;
      _type: "feature";
      _key: string;
    }>;
    formTitle?: string;
    formFields?: {
      showDate?: "false" | "true";
      showFirstName?: "false" | "true";
      showLastName?: "false" | "true";
      showFileUpload?: "false" | "true";
      fileUploadLabel?: string;
    };
    buttonText?: string;
    buttonIcon?: "arrowRight" | "none" | "phone";
  } | {
    _key: string;
    _type: "ctaSection";
    variant?: "default" | "full" | "highlight" | "minimal";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    buttons?: Array<{
      label?: string;
      url?: string;
      variant?: "default" | "ghost" | "link" | "outline" | "secondary";
      icon?: "arrowRight" | "none" | "phone" | "plus";
      _type: "button";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "faqSection";
    variant?: "centered" | "sideBySide";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    buttonText?: string;
    buttonUrl?: string;
    buttonIcon?: "arrowRight" | "check" | "none" | "phone" | "plus";
    faqItems?: Array<{
      question?: string;
      answer?: string;
      _type: "faqItem";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "featureSection";
    variant?: "bigMasonryGrid" | "carouselFeature" | "default" | "imageCards" | "leftImage" | "masonryGrid" | "rightImage" | "slidingComparison" | "withImage";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    comparisonImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    features?: Array<{
      title?: string;
      description?: string;
      icon?: "barChart" | "calendar" | "clock" | "dollar" | "heart" | "lock" | "mail" | "settings" | "star" | "user";
      highlighted?: "false" | "true";
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      _type: "feature";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "heroSection";
    variant?: "badgeBanner" | "buttonBanner" | "gridGallery";
    bannerButton?: {
      label?: string;
      url?: string;
    };
    badgeText?: string;
    heading?: string;
    subheading?: string;
    buttons?: Array<{
      label?: string;
      url?: string;
      variant?: "default" | "ghost" | "link" | "outline" | "secondary";
      icon?: "arrowRight" | "calendar" | "check" | "heart" | "mail" | "phone" | "plus" | "search" | "settings" | "star";
      _type: "button";
      _key: string;
    }>;
    media?: {
      type?: "image" | "placeholder" | "video";
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      video?: {
        url?: string;
        autoplay?: "false" | "true";
        loop?: "false" | "true";
        muted?: "false" | "true";
      };
      additionalImages?: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }>;
    };
  } | {
    _key: string;
    _type: "newsletterSection";
    variant?: "default" | "full" | "highlight" | "minimal";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    inputPlaceholder?: string;
    buttonText?: string;
    buttonIcon?: "arrowRight" | "mail" | "none" | "plus";
    successMessage?: string;
    privacyText?: string;
  } | {
    _key: string;
    _type: "pricingSection";
    badgeText?: string;
    heading?: string;
    subheading?: string;
    plans?: Array<{
      title?: string;
      description?: string;
      highlighted?: "false" | "true";
      price?: string;
      billingPeriod?: string;
      features?: Array<{
        title?: string;
        description?: string;
        _type: "feature";
        _key: string;
      }>;
      buttonText?: string;
      buttonUrl?: string;
      buttonIcon?: "arrowRight" | "phone" | "plus";
      buttonVariant?: "default" | "outline" | "secondary";
      _type: "plan";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "statsSection";
    variant?: "grid" | "withContent";
    badgeText?: string;
    contentHeading?: string;
    contentText?: string;
    heading?: string;
    subheading?: string;
    stats?: Array<{
      value?: string;
      label?: string;
      trendDirection?: "down" | "none" | "up";
      trendValue?: string;
      color?: "destructive" | "muted" | "primary" | "success" | "warning";
      _type: "stat";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "testimonialsSection";
    variant?: "carousel" | "grid" | "masonry-grid";
    heading?: string;
    subheading?: string;
    testimonials?: Array<{
      title?: string;
      content?: string;
      author?: string;
      role?: string;
      avatar?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      _type: "testimonial";
      _key: string;
    }>;
  }> | null;
  _translations: Array<{
    _id: string;
    title: string | null;
    slug: null;
    language: string | null;
  } | {
    _id: string;
    title: null;
    slug: Slug | null;
    language: string | null;
  } | {
    _id: string;
    title: string | null;
    slug: Slug | null;
    language: string | null;
  } | null>;
} | null;
// Variable: BLOG_POST_PAGE_QUERY
// Query: *[  _type == "blogPost"  && slug.current == $slug  && language == $language][0]{  _id,  _type,  title,  slug,  publishedAt,  excerpt,  mainImage{    asset,    hotspot,    crop,    alt,    caption  },  body,  featured,  "authors": authors[]->{    _id,    name,    slug,    avatar,    bio,    email,    role,    socialLinks[]{      _key,      platform,      url,      username    }  },  "author": authors[0]->{    _id,    name,    slug,    avatar,    bio,    email,    role,    socialLinks[]{      _key,      platform,      url,      username    }  },  "categories": categories[]->{    _id,    title,    slug,    description  },  "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{    _id,    title,    slug,    language  }}
export type BLOG_POST_PAGE_QUERYResult = {
  _id: string;
  _type: "blogPost";
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  excerpt: string | null;
  mainImage: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
    alt: string | null;
    caption: string | null;
  } | null;
  body: PortableText | null;
  featured: "false" | "true" | null;
  authors: Array<{
    _id: string;
    name: string | null;
    slug: Slug | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    bio: string | null;
    email: string | null;
    role: string | null;
    socialLinks: Array<{
      _key: string;
      platform: "github" | "instagram" | "linkedin" | "twitter" | "website" | "youtube" | null;
      url: string | null;
      username: string | null;
    }> | null;
  }> | null;
  author: {
    _id: string;
    name: string | null;
    slug: Slug | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    bio: string | null;
    email: string | null;
    role: string | null;
    socialLinks: Array<{
      _key: string;
      platform: "github" | "instagram" | "linkedin" | "twitter" | "website" | "youtube" | null;
      url: string | null;
      username: string | null;
    }> | null;
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
  }> | null;
  _translations: Array<{
    _id: string;
    title: string | null;
    slug: null;
    language: string | null;
  } | {
    _id: string;
    title: null;
    slug: Slug | null;
    language: string | null;
  } | {
    _id: string;
    title: string | null;
    slug: Slug | null;
    language: string | null;
  } | null>;
} | null;
// Variable: AUTHOR_PAGE_QUERY
// Query: *[  _type == "author"  && defined(slug.current)  && defined(language)  && ($slug == null || slug.current == $slug)  && ($language == null || language == $language)]{  _id,  _type,  _createdAt,  _updatedAt,  _rev,  name,  slug,  role,  bio,  fullBio,  email,  avatar,  featuredImage,  language,  socialLinks[]{    _key,    _type,    platform,    url,    username  },  "posts": *[    _type == "blogPost"    && references(^._id)    && language == ^.language  ] | order(publishedAt desc) {    _id,    _type,    title,    "slug": slug.current,    publishedAt,    excerpt,    mainImage,    featured,    _createdAt,    _updatedAt,    _rev,    "categories": categories[]->{      _id,      _type,      title,      "slug": slug.current,      description,      language,      _createdAt,      _updatedAt,      _rev    }  },  "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{    _id,    name,    slug,    language  }}
export type AUTHOR_PAGE_QUERYResult = Array<{
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string | null;
  slug: Slug | null;
  role: string | null;
  bio: string | null;
  fullBio: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  email: string | null;
  avatar: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  featuredImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  language: string | null;
  socialLinks: Array<{
    _key: string;
    _type: "socialLink";
    platform: "github" | "instagram" | "linkedin" | "twitter" | "website" | "youtube" | null;
    url: string | null;
    username: string | null;
  }> | null;
  posts: Array<{
    _id: string;
    _type: "blogPost";
    title: string | null;
    slug: string | null;
    publishedAt: string | null;
    excerpt: string | null;
    mainImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: "image";
    } | null;
    featured: "false" | "true" | null;
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    categories: Array<{
      _id: string;
      _type: "category";
      title: string | null;
      slug: string | null;
      description: string | null;
      language: string | null;
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
    }> | null;
  }>;
  _translations: Array<{
    _id: string;
    name: null;
    slug: null;
    language: string | null;
  } | {
    _id: string;
    name: null;
    slug: Slug | null;
    language: string | null;
  } | {
    _id: string;
    name: string | null;
    slug: Slug | null;
    language: string | null;
  } | null>;
}>;
// Variable: CATEGORY_PAGE_QUERY
// Query: *[  _type == "category"  && slug.current == $slug  && language == $language][0]{  _id,  _type,  _createdAt,  _updatedAt,  _rev,  language,  title,  slug,  description,  "posts": *[    _type == "blogPost"    && references(^._id)    && language == $language  ] | order(publishedAt desc) {    _id,    _type,    title,    slug,    publishedAt,    excerpt,    mainImage,    featured,    "author": authors[0]->{      _id,      _type,      _createdAt,      _updatedAt,      _rev,      name,      slug,      avatar,      bio,      email,      role,      language    },    "authors": authors[]->{      _id,      _type,      _createdAt,      _updatedAt,      _rev,      name,      slug,      avatar,      bio,      email,      role,      language    },    "categories": categories[]->{      _id,      _type,      title,      slug,      description,      language,      _createdAt,      _updatedAt,      _rev    },    _createdAt,    _updatedAt,    _rev  },  "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{    _id,    title,    slug,    language  }}
export type CATEGORY_PAGE_QUERYResult = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language: string | null;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  posts: Array<{
    _id: string;
    _type: "blogPost";
    title: string | null;
    slug: Slug | null;
    publishedAt: string | null;
    excerpt: string | null;
    mainImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: "image";
    } | null;
    featured: "false" | "true" | null;
    author: {
      _id: string;
      _type: "author";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name: string | null;
      slug: Slug | null;
      avatar: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      bio: string | null;
      email: string | null;
      role: string | null;
      language: string | null;
    } | null;
    authors: Array<{
      _id: string;
      _type: "author";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name: string | null;
      slug: Slug | null;
      avatar: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      bio: string | null;
      email: string | null;
      role: string | null;
      language: string | null;
    }> | null;
    categories: Array<{
      _id: string;
      _type: "category";
      title: string | null;
      slug: Slug | null;
      description: string | null;
      language: string | null;
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
    }> | null;
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
  }>;
  _translations: Array<{
    _id: string;
    title: string | null;
    slug: null;
    language: string | null;
  } | {
    _id: string;
    title: null;
    slug: Slug | null;
    language: string | null;
  } | {
    _id: string;
    title: string | null;
    slug: Slug | null;
    language: string | null;
  } | null>;
} | null;
// Variable: BLOG_INDEX_PAGE_QUERY
// Query: {  "config": *[    _type == "blogPage"    && language == $language  ][0]{    _id,    _type,    title,    description,    layout,    postsPerPage,    featuredPostsCount,    showOnlyFeaturedPosts,    seo{      metaTitle,      metaDescription    }  },  "posts": *[    _type == "blogPost"    && language == $language  ] | order(publishedAt desc)[$start...$end]{    _id,    _type,    title,    slug,    publishedAt,    excerpt,    mainImage,    featured,    "author": authors[0]->{      _id,      name,      avatar    },    "categories": categories[]->{      _id,      _type,      _createdAt,      _updatedAt,      _rev,      title,      slug,      description,      language    }  },  "totalPosts": count(*[_type == "blogPost" && language == $language])}
export type BLOG_INDEX_PAGE_QUERYResult = {
  config: {
    _id: string;
    _type: "blogPage";
    title: string | null;
    description: string | null;
    layout: "compact" | "featured" | "grid" | null;
    postsPerPage: number | null;
    featuredPostsCount: number | null;
    showOnlyFeaturedPosts: "false" | "true" | null;
    seo: {
      metaTitle: string | null;
      metaDescription: string | null;
    } | null;
  } | null;
  posts: Array<{
    _id: string;
    _type: "blogPost";
    title: string | null;
    slug: Slug | null;
    publishedAt: string | null;
    excerpt: string | null;
    mainImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: "image";
    } | null;
    featured: "false" | "true" | null;
    author: {
      _id: string;
      name: string | null;
      avatar: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
    } | null;
    categories: Array<{
      _id: string;
      _type: "category";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string | null;
      slug: Slug | null;
      description: string | null;
      language: string | null;
    }> | null;
  }>;
  totalPosts: number;
};

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[\n  _type == \"blogPost\"\n  && language == $language\n  && ($featuredOnly == false || featured == \"true\")\n] | order(publishedAt desc)[$start...$end]{\n  _id,\n  title,\n  slug,\n  publishedAt,\n  excerpt,\n  mainImage,\n  featured,\n  \"author\": authors[0]->{\n    _id,\n    name,\n    avatar\n  },\n  \"categories\": categories[]->{\n    _id,\n    title,\n    slug\n  }\n}": BLOG_POSTS_QUERYResult;
    "*[\n  _type == \"translation.metadata\" \n  && (\n    ($documentId != null && translations[].value._ref == $documentId) ||\n    ($slug != null && references(*[\n      _type in [\"page\", \"blogPost\", \"author\", \"category\"] \n      && slug.current == $slug\n      && language == $currentLanguage\n    ][0]._id))\n  )\n][0]{\n  translations[]{\n    _key,\n    value->{\n      _id,\n      _type,\n      slug,\n      language,\n      title\n    }\n  }\n}": TRANSLATION_METADATA_QUERYResult;
    "*[\n  _type == \"header\"\n  && language == $language\n][0]{\n  _id,\n  title,\n  logo,\n  variant,\n  navigationItems[]{\n    title,\n    href,\n    description,\n    items[]{\n      title,\n      href,\n      _key\n    },\n    _key\n  },\n  ctaButtons[]{\n    label,\n    url,\n    variant,\n    _key\n  },\n  dropdownCTALabel,\n  dropdownCTAUrl,\n  \"_translations\": *[_type == \"translation.metadata\" && references(^._id)].translations[].value->{\n    _id,\n    title,\n    language\n  }\n}": LAYOUT_HEADER_QUERYResult;
    "*[\n  _type == \"footer\"\n  && language == $language\n][0]{\n  _id,\n  title,\n  logo,\n  variant,\n  description,\n  address,\n  legalLinks[]{\n    title,\n    url,\n    _key\n  },\n  navigationItems[]{\n    title,\n    href,\n    description,\n    items[]{\n      title,\n      href,\n      _key\n    },\n    _key\n  },\n  \"_translations\": *[_type == \"translation.metadata\" && references(^._id)].translations[].value->{\n    _id,\n    title,\n    language\n  }\n}": LAYOUT_FOOTER_QUERYResult;
    "*[\n  _type == \"page\"\n  && slug.current == \"/\"\n  && language == $language\n][0]{\n  _id,\n  _type,\n  title,\n  description,\n  ogImage,\n  pageBuilder[]{\n    _key,\n    _type,\n    ...,\n    _type == \"compareFeaturesSection\" => {\n      ...,\n      \"features\": features[]{\n        \"_ref\": _ref,\n        \"_key\": _key,\n        \"_type\": _type\n      },\n      \"plans\": plans[]{\n        ...,\n        \"featureValues\": featureValues[]{\n          ...,\n          \"featureRef\": {\n            \"_ref\": featureRef._ref,\n            \"_type\": featureRef._type\n          }\n        }\n      }\n    }\n  },\n  \"_translations\": *[_type == \"translation.metadata\" && references(^._id)].translations[].value->{\n    _id,\n    title,\n    slug,\n    language\n  }\n}": HOME_PAGE_QUERYResult;
    "*[\n  _type == \"page\"\n  && slug.current == $slug\n  && language == $language\n][0]{\n  _id,\n  _type,\n  title,\n  description,\n  ogImage,\n  pageBuilder[]{\n    _key,\n    _type,\n    ...,\n    _type == \"compareFeaturesSection\" => {\n      ...,\n      \"features\": features[]{\n        \"_ref\": _ref,\n        \"_key\": _key,\n        \"_type\": _type\n      },\n      \"plans\": plans[]{\n        ...,\n        \"featureValues\": featureValues[]{\n          ...,\n          \"featureRef\": {\n            \"_ref\": featureRef._ref,\n            \"_type\": featureRef._type\n          }\n        }\n      }\n    }\n  },\n  \"_translations\": *[_type == \"translation.metadata\" && references(^._id)].translations[].value->{\n    _id,\n    title,\n    slug,\n    language\n  }\n}": PAGE_QUERYResult;
    "*[\n  _type == \"blogPost\"\n  && slug.current == $slug\n  && language == $language\n][0]{\n  _id,\n  _type,\n  title,\n  slug,\n  publishedAt,\n  excerpt,\n  mainImage{\n    asset,\n    hotspot,\n    crop,\n    alt,\n    caption\n  },\n  body,\n  featured,\n  \"authors\": authors[]->{\n    _id,\n    name,\n    slug,\n    avatar,\n    bio,\n    email,\n    role,\n    socialLinks[]{\n      _key,\n      platform,\n      url,\n      username\n    }\n  },\n  \"author\": authors[0]->{\n    _id,\n    name,\n    slug,\n    avatar,\n    bio,\n    email,\n    role,\n    socialLinks[]{\n      _key,\n      platform,\n      url,\n      username\n    }\n  },\n  \"categories\": categories[]->{\n    _id,\n    title,\n    slug,\n    description\n  },\n  \"_translations\": *[_type == \"translation.metadata\" && references(^._id)].translations[].value->{\n    _id,\n    title,\n    slug,\n    language\n  }\n}": BLOG_POST_PAGE_QUERYResult;
    "*[\n  _type == \"author\"\n  && defined(slug.current)\n  && defined(language)\n  && ($slug == null || slug.current == $slug)\n  && ($language == null || language == $language)\n]{\n  _id,\n  _type,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  name,\n  slug,\n  role,\n  bio,\n  fullBio,\n  email,\n  avatar,\n  featuredImage,\n  language,\n  socialLinks[]{\n    _key,\n    _type,\n    platform,\n    url,\n    username\n  },\n  \"posts\": *[\n    _type == \"blogPost\"\n    && references(^._id)\n    && language == ^.language\n  ] | order(publishedAt desc) {\n    _id,\n    _type,\n    title,\n    \"slug\": slug.current,\n    publishedAt,\n    excerpt,\n    mainImage,\n    featured,\n    _createdAt,\n    _updatedAt,\n    _rev,\n    \"categories\": categories[]->{\n      _id,\n      _type,\n      title,\n      \"slug\": slug.current,\n      description,\n      language,\n      _createdAt,\n      _updatedAt,\n      _rev\n    }\n  },\n  \"_translations\": *[_type == \"translation.metadata\" && references(^._id)].translations[].value->{\n    _id,\n    name,\n    slug,\n    language\n  }\n}": AUTHOR_PAGE_QUERYResult;
    "*[\n  _type == \"category\"\n  && slug.current == $slug\n  && language == $language\n][0]{\n  _id,\n  _type,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  language,\n  title,\n  slug,\n  description,\n  \"posts\": *[\n    _type == \"blogPost\"\n    && references(^._id)\n    && language == $language\n  ] | order(publishedAt desc) {\n    _id,\n    _type,\n    title,\n    slug,\n    publishedAt,\n    excerpt,\n    mainImage,\n    featured,\n    \"author\": authors[0]->{\n      _id,\n      _type,\n      _createdAt,\n      _updatedAt,\n      _rev,\n      name,\n      slug,\n      avatar,\n      bio,\n      email,\n      role,\n      language\n    },\n    \"authors\": authors[]->{\n      _id,\n      _type,\n      _createdAt,\n      _updatedAt,\n      _rev,\n      name,\n      slug,\n      avatar,\n      bio,\n      email,\n      role,\n      language\n    },\n    \"categories\": categories[]->{\n      _id,\n      _type,\n      title,\n      slug,\n      description,\n      language,\n      _createdAt,\n      _updatedAt,\n      _rev\n    },\n    _createdAt,\n    _updatedAt,\n    _rev\n  },\n  \"_translations\": *[_type == \"translation.metadata\" && references(^._id)].translations[].value->{\n    _id,\n    title,\n    slug,\n    language\n  }\n}": CATEGORY_PAGE_QUERYResult;
    "{\n  \"config\": *[\n    _type == \"blogPage\"\n    && language == $language\n  ][0]{\n    _id,\n    _type,\n    title,\n    description,\n    layout,\n    postsPerPage,\n    featuredPostsCount,\n    showOnlyFeaturedPosts,\n    seo{\n      metaTitle,\n      metaDescription\n    }\n  },\n  \"posts\": *[\n    _type == \"blogPost\"\n    && language == $language\n  ] | order(publishedAt desc)[$start...$end]{\n    _id,\n    _type,\n    title,\n    slug,\n    publishedAt,\n    excerpt,\n    mainImage,\n    featured,\n    \"author\": authors[0]->{\n      _id,\n      name,\n      avatar\n    },\n    \"categories\": categories[]->{\n      _id,\n      _type,\n      _createdAt,\n      _updatedAt,\n      _rev,\n      title,\n      slug,\n      description,\n      language\n    }\n  },\n  \"totalPosts\": count(*[_type == \"blogPost\" && language == $language])\n}": BLOG_INDEX_PAGE_QUERYResult;
  }
}
